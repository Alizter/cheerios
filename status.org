* Notes
** Domain Specific Language for Creating Combinators
I would like to make a internal dsl for combining combinators.
I noticed that all of the combinators that I have created thus far
operate by calling serializers passed in upon a binary array and
threading the result through next combinators building up a stack
of return values. These return values are then combined at the end
to produce the final result. This is combersome because you have to
make multiple match statements that all return none if passed none.

I could create a stack based dsl in ocaml or coq which uses a stack
and some simple forth based stack functions to allow loops and the
like so that you dont have to create these match statements and you
pass a function at the end which takes all of the accumulated values
and produces the final values.

This is potentially important if the user wants to serialize an option
or record type which could get combersome having to deal with all of
the matches.
** Binary Options
Looks like ocaml has a binary representation which uses chars as the
byte format. I think this will likely be more performant than what
I have currently, but I might lose the ability to effectively write
less than single byte data structures to the stream. This is likely
only important when dealing with booleans and maybe enum-like
datastructures. In the end this probably isn't that important, but
I will ask folks.

This is probably a good place to improve if the current strategy
of using boolean arrays becomes too inefficient. In general, unless
the performance isn't terrible, the slow down will be mostly in
network transit instead. So we will likely be able to get away with
a fair amount.
* Bugs
